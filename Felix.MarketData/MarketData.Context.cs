//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Felix.MarketData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FelixMarketEntities : DbContext
    {
        public FelixMarketEntities()
            : base("name=FelixMarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bar> Bars { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<MetaMapping> MetaMappings { get; set; }
        public virtual DbSet<Trend> Trends { get; set; }
        public virtual DbSet<Move> Moves { get; set; }
    
        public virtual ObjectResult<Move> MovesGet(Nullable<int> contractId, Nullable<int> period, Nullable<System.DateTime> startTime)
        {
            var contractIdParameter = contractId.HasValue ?
                new ObjectParameter("contractId", contractId) :
                new ObjectParameter("contractId", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Move>("MovesGet", contractIdParameter, periodParameter, startTimeParameter);
        }
    
     
    }
}
